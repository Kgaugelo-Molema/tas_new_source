\u gateway1_tas;
#CREATE USER 'tasuser'@'localhost' IDENTIFIED BY 'tasuser123';
create database gateway1_tas;
CREATE USER 'gateway1_tasuser'@'localhost' IDENTIFIED BY 'tasuser123';
grant all on gateway1_tas.* to 'gateway1_tasuser'@'localhost';
CREATE TABLE TASUSER (ID int(9) NOT NULL auto_increment, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `USERNAME` VARCHAR(255), PRIMARY KEY (id))
--2017.05.24_TAS.NEW_0.1.001
CREATE TABLE STATS (STAT_TYPE VARCHAR(10) NOT NULL, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `DESCRIPTION` VARCHAR(50), `ACTUAL` FLOAT, BALANCE FLOAT, TARGET FLOAT, PRIMARY KEY (STAT_TYPE))
----2017.05.25
CREATE TABLE OPERATIONS	(OPERATION_ID int(9) NOT NULL auto_increment, STAT_TYPE	VARCHAR(10) NOT NULL, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `YEAR` SMALLINT, QUARTER SMALLINT, PROVINCE VARCHAR(2), QTY SMALLINT, PRIMARY KEY (OPERATION_ID))
CREATE TABLE PROGRAMS(PROGRAM_ID int(9) NOT NULL auto_increment, STAT_TYPE VARCHAR(10) NOT NULL, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `YEAR` SMALLINT, QUARTER SMALLINT, PROVINCE VARCHAR(2), QTY SMALLINT, QTY_PCT FLOAT, BUDGET FLOAT, PRIMARY KEY (PROGRAM_ID))
CREATE TABLE STAT_TYPES(STAT_TYPE VARCHAR(10) NOT NULL, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `DESCRIPTION` VARCHAR(50), PRIMARY KEY (STAT_TYPE))
--CREATE TABLE PROG_CODES(PROG_CODE VARCHAR(10) NOT NULL, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `DESCRIPTION` VARCHAR(50), PRIMARY KEY (PROG_CODE))
--CREATE TABLE OBJECTIVE_CODES(OBJECTIVE_CODE VARCHAR(10) NOT NULL, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `DESCRIPTION` VARCHAR(50), PRIMARY KEY (OBJECTIVE_CODE))
--CREATE VIEW ORGANISATIONALPROGRESS AS
--SELECT "TAS" AS 'Programme/ Dept', p.YEAR, DESCRIPTION 'KPI', p.QTY 'TARGET', o.QTY 'ACTUAL', (1- (o.QTY / p.QTY))*100 'VARIANCE (%)'
--FROM STAT_TYPES s 
--JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE AND p.QUARTER=1 
--JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE AND o.QUARTER=1
----2017.05.26_TAS.NEW_0.02.001
CREATE VIEW ORGANISATIONALPROGRESS AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(IFNULL(p.YEAR,o.YEAR), 0) 'YEAR', DESCRIPTION 'KPI', IFNULL(FORMAT(AVG(p.QTY), 0), 0) 'TARGET', IFNULL(FORMAT(AVG(o.QTY), 0), 0) 'ACTUAL', 
	IFNULL(FORMAT((1- (o.QTY / p.QTY))*100, 2), 0) 'VARIANCE (%)', FORMAT((IFNULL(AVG(p.QTY), 0) - IFNULL(AVG(o.QTY), 0)), 0) 'BALANCE', 
	CASE (1- (o.QTY / p.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?', s.STAT_TYPE	
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE  
LEFT JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE
GROUP BY p.YEAR,o.YEAR,DESCRIPTION
----2017.05.27_TAS.NEW_0.03.001
CREATE TABLE PROVINCES(PROV_CODE VARCHAR(10) NOT NULL, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `DESCRIPTION` VARCHAR(50), PRIMARY KEY (PROV_CODE))
CREATE VIEW ORGANISATIONALPROGRESS AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(IFNULL(p.YEAR,o.YEAR), 0) 'YEAR', DESCRIPTION 'KPI', IFNULL(FORMAT(AVG(p.QTY), 0), 0) 'TARGET', IFNULL(FORMAT(SUM(o.QTY), 0), 0) 'ACTUAL', 
	IFNULL(FORMAT((1- (SUM(o.QTY) / p.QTY))*100, 2), 0) 'VARIANCE (%)', FORMAT((IFNULL(AVG(p.QTY), 0) - IFNULL(SUM(o.QTY), 0)), 0) 'BALANCE', 
	CASE (1- (o.QTY / p.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?', s.STAT_TYPE	
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE 
LEFT JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE
GROUP BY p.YEAR,o.YEAR,DESCRIPTION
----2017.05.28
CREATE VIEW ORGPROGRESSFILTERERD AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(IFNULL(p.YEAR,o.YEAR), 0) 'YEAR', DESCRIPTION 'KPI', IFNULL(FORMAT(AVG(p.QTY), 0), 0) 'TARGET', IFNULL(FORMAT(SUM(o.QTY), 0), 0) 'ACTUAL', p.PROVINCE 'Prog_Prov', o.PROVINCE 'Ops_Prov', p.QUARTER 'PROG_QUARTER', o.QUARTER 'OPS_QUARTER',
	IFNULL(FORMAT((1- (SUM(o.QTY) / p.QTY))*100, 2), 0) 'VARIANCE (%)', FORMAT((IFNULL(AVG(p.QTY), 0) - IFNULL(SUM(o.QTY), 0)), 0) 'BALANCE', 
	CASE (1- (o.QTY / p.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?', s.STAT_TYPE	
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE 
LEFT JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE
GROUP BY p.YEAR,o.YEAR,DESCRIPTION,p.PROVINCE,o.PROVINCE,p.QUARTER,o.QUARTER
----2017.05.30
CREATE TABLE BUDGETS(BUDGET_ID int(9) NOT NULL auto_increment, `DATESTAMP` DATE, `TIME` VARCHAR(8), `IP` VARCHAR(15), `BROWSER` TINYTEXT, `YEAR` SMALLINT, QUARTER SMALLINT, PROVINCE VARCHAR(2), QTY SMALLINT, QTY_PCT FLOAT, BUDGET FLOAT, PRIMARY KEY (BUDGET_ID))
----2017.05.31_TAS.NEW_0.04.001
ALTER TABLE PROGRAMS ADD COLUMN BUDGET_ID int(9) NOT NULL;
CREATE VIEW ORGANISATIONALPROGRESS AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(IFNULL(p.YEAR,o.YEAR), 0) 'YEAR', DESCRIPTION 'KPI', IFNULL(FORMAT(SUM(b.QTY), 0), 0) 'TARGET', IFNULL(FORMAT(SUM(o.QTY), 0), 0) 'ACTUAL', 
	IFNULL(FORMAT((1- (SUM(o.QTY) / SUM(b.QTY)))*100, 2), 0) 'VARIANCE (%)', FORMAT((IFNULL(SUM(b.QTY), 0) - IFNULL(SUM(o.QTY), 0)), 0) 'BALANCE', o.OPERATION_ID, 
	CASE (1- (o.QTY / b.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?', s.STAT_TYPE
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE 
LEFT JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE
LEFT JOIN BUDGETS b ON b.BUDGET_ID = p.BUDGET_ID
GROUP BY p.YEAR,o.YEAR,DESCRIPTION, o.OPERATION_ID;
CREATE VIEW ORGPROGRESSFILTERERD AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(IFNULL(p.YEAR,o.YEAR), 0) 'YEAR', DESCRIPTION 'KPI', IFNULL(FORMAT(SUM(b.QTY), 0), 0) 'TARGET', IFNULL(FORMAT(SUM(o.QTY), 0), 0) 'ACTUAL', p.PROVINCE 'Prog_Prov', o.PROVINCE 'Ops_Prov', p.QUARTER 'PROG_QUARTER', o.QUARTER 'OPS_QUARTER', o.OPERATION_ID,
	IFNULL(FORMAT((1- (SUM(o.QTY) / SUM(b.QTY)))*100, 2), 0) 'VARIANCE (%)', FORMAT((IFNULL(SUM(b.QTY), 0) - IFNULL(SUM(o.QTY), 0)), 0) 'BALANCE', 
	CASE (1- (o.QTY / p.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?', s.STAT_TYPE	
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE 
LEFT JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE
LEFT JOIN BUDGETS b ON b.BUDGET_ID = p.BUDGET_ID
GROUP BY p.YEAR,o.YEAR,DESCRIPTION,p.PROVINCE,o.PROVINCE,p.QUARTER,o.QUARTER,o.OPERATION_ID
----2017.06.03_TAS.NEW_0.05.001
CREATE VIEW ORGANISATIONALPROGRESS AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(IFNULL(p.YEAR,o.YEAR), 0) 'YEAR', DESCRIPTION 'KPI', IFNULL(FORMAT(SUM(b.QTY), 0), 0) 'TARGET', IFNULL(FORMAT(SUM(o.QTY), 0), 0) 'ACTUAL', 
	IFNULL(FORMAT((1- (SUM(o.QTY) / SUM(b.QTY)))*100, 2), 0) 'VARIANCE (%)', FORMAT((IFNULL(SUM(b.QTY), 0) - IFNULL(SUM(o.QTY), 0)), 0) 'BALANCE', 
	CASE (1- (o.QTY / b.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?', s.STAT_TYPE
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE 
LEFT JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE
LEFT JOIN BUDGETS b ON b.BUDGET_ID = p.BUDGET_ID
GROUP BY p.YEAR,o.YEAR,DESCRIPTION;
CREATE VIEW ORGPROGRESSDETAILED AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(IFNULL(p.YEAR,o.YEAR), 0) 'YEAR', v.DESCRIPTION 'PROVINCE', p.QUARTER, s.STAT_TYPE, s.DESCRIPTION, IFNULL(FORMAT(SUM(b.QTY), 0), 0) 'TARGET', IFNULL(FORMAT(SUM(o.QTY), 0), 0) 'ACTUAL', 
	IFNULL(FORMAT((1- (SUM(o.QTY) / SUM(b.QTY)))*100, 2), 0) 'VARIANCE (%)', FORMAT((IFNULL(SUM(b.QTY), 0) - IFNULL(SUM(o.QTY), 0)), 0) 'BALANCE',
	CASE (1- (o.QTY / b.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?'
FROM STAT_TYPES s 
JOIN PROGRAMS p ON s.STAT_TYPE = p.STAT_TYPE 
JOIN OPERATIONS o ON s.STAT_TYPE = o.STAT_TYPE
JOIN BUDGETS b ON b.BUDGET_ID = p.BUDGET_ID
JOIN PROVINCES v ON p.PROVINCE = v.PROV_CODE
GROUP BY p.YEAR,o.YEAR, p.PROVINCE, p.QUARTER, s.STAT_TYPE, s.DESCRIPTION
ORDER BY p.YEAR,o.YEAR, p.PROVINCE, p.QUARTER, s.STAT_TYPE, s.DESCRIPTION;
--2017.06.04_TAS.NEW_0.05.002
CREATE VIEW ORGPROGRESSDETAILED AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(pq1.YEAR,oq1.YEAR) 'YEAR', v.DESCRIPTION 'PROVINCE', 
s.STAT_TYPE, s.DESCRIPTION, 
IFNULL(FORMAT(SUM(bq1.QTY), 0), 0) 'Q1 TARGET', IFNULL(FORMAT(SUM(oq1.QTY), 0), 0) 'Q1 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq1.QTY) / SUM(bq1.QTY)))*100, 2), 0) 'Q1 VARIANCE (%)', 
FORMAT((IFNULL(SUM(bq1.QTY), 0) - IFNULL(SUM(oq1.QTY), 0)), 0) 'Q1 BALANCE',
IFNULL(FORMAT(SUM(bq2.QTY), 0), 0) 'Q2 TARGET', IFNULL(FORMAT(SUM(oq2.QTY), 0), 0) 'Q2 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq2.QTY) / SUM(bq2.QTY)))*100, 2), 0) 'Q2 VARIANCE (%)', 
FORMAT((IFNULL(SUM(bq2.QTY), 0) - IFNULL(SUM(oq2.QTY), 0)), 0) 'Q2 BALANCE',
IFNULL(FORMAT(SUM(bq3.QTY), 0), 0) 'Q3 TARGET', IFNULL(FORMAT(SUM(oq3.QTY), 0), 0) 'Q3 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq3.QTY) / SUM(bq3.QTY)))*100, 2), 0) 'Q3 VARIANCE (%)', 
FORMAT((IFNULL(SUM(bq3.QTY), 0) - IFNULL(SUM(oq3.QTY), 0)), 0) 'Q3 BALANCE',
IFNULL(FORMAT(SUM(bq4.QTY), 0), 0) 'Q4 TARGET', IFNULL(FORMAT(SUM(oq4.QTY), 0), 0) 'Q4 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq4.QTY) / SUM(bq4.QTY)))*100, 2), 0) 'Q4 VARIANCE (%)', 
FORMAT((IFNULL(SUM(bq4.QTY), 0) - IFNULL(SUM(oq4.QTY), 0)), 0) 'Q4 BALANCE',
CASE (1- (oq1.QTY / bq1.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?'
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS pq1 ON s.STAT_TYPE = pq1.STAT_TYPE AND pq1.QUARTER = 1
LEFT JOIN PROGRAMS pq2 ON s.STAT_TYPE = pq2.STAT_TYPE AND pq2.QUARTER = 2
LEFT JOIN PROGRAMS pq3 ON s.STAT_TYPE = pq3.STAT_TYPE AND pq3.QUARTER = 3
LEFT JOIN PROGRAMS pq4 ON s.STAT_TYPE = pq4.STAT_TYPE AND pq4.QUARTER = 4
LEFT JOIN OPERATIONS oq1 ON s.STAT_TYPE = oq1.STAT_TYPE AND pq1.QUARTER = 1
LEFT JOIN OPERATIONS oq2 ON s.STAT_TYPE = oq2.STAT_TYPE AND pq1.QUARTER = 2
LEFT JOIN OPERATIONS oq3 ON s.STAT_TYPE = oq3.STAT_TYPE AND pq1.QUARTER = 3
LEFT JOIN OPERATIONS oq4 ON s.STAT_TYPE = oq4.STAT_TYPE AND pq1.QUARTER = 4
LEFT JOIN BUDGETS bq1 ON bq1.BUDGET_ID = pq1.BUDGET_ID 
LEFT JOIN BUDGETS bq2 ON bq2.BUDGET_ID = pq2.BUDGET_ID 
LEFT JOIN BUDGETS bq3 ON bq3.BUDGET_ID = pq3.BUDGET_ID 
LEFT JOIN BUDGETS bq4 ON bq4.BUDGET_ID = pq4.BUDGET_ID 
JOIN PROVINCES v ON (pq1.PROVINCE = v.PROV_CODE OR pq2.PROVINCE = v.PROV_CODE OR pq3.PROVINCE = v.PROV_CODE OR pq4.PROVINCE = v.PROV_CODE)
GROUP BY pq1.YEAR,oq1.YEAR, pq1.PROVINCE, pq1.QUARTER, pq2.QUARTER, pq3.QUARTER, pq4.QUARTER, s.STAT_TYPE, s.DESCRIPTION
ORDER BY pq1.YEAR,oq1.YEAR, pq1.PROVINCE, pq1.QUARTER, s.STAT_TYPE, s.DESCRIPTION;
--2017.06.16
CREATE VIEW ORGPROGRESSDETAILED AS
SELECT "TAS" AS 'Programme/ Dept', IFNULL(pq1.YEAR,oq1.YEAR) 'YEAR', v.DESCRIPTION 'PROVINCE', 
s.STAT_TYPE, s.DESCRIPTION, 
IFNULL(FORMAT(AVG(bq1.QTY), 0), 0) 'Q1 TARGET', IFNULL(FORMAT(SUM(oq1.QTY), 0), 0) 'Q1 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq1.QTY) / AVG(bq1.QTY)))*100, 2), 0) 'Q1 VARIANCE (%)', 
FORMAT((IFNULL(AVG(bq1.QTY), 0) - IFNULL(SUM(oq1.QTY), 0)), 0) 'Q1 BALANCE',
IFNULL(FORMAT(AVG(bq2.QTY), 0), 0) 'Q2 TARGET', IFNULL(FORMAT(SUM(oq2.QTY), 0), 0) 'Q2 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq2.QTY) / AVG(bq2.QTY)))*100, 2), 0) 'Q2 VARIANCE (%)', 
FORMAT((IFNULL(AVG(bq2.QTY), 0) - IFNULL(SUM(oq2.QTY), 0)), 0) 'Q2 BALANCE',
IFNULL(FORMAT(AVG(bq3.QTY), 0), 0) 'Q3 TARGET', IFNULL(FORMAT(SUM(oq3.QTY), 0), 0) 'Q3 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq3.QTY) / AVG(bq3.QTY)))*100, 2), 0) 'Q3 VARIANCE (%)', 
FORMAT((IFNULL(AVG(bq3.QTY), 0) - IFNULL(SUM(oq3.QTY), 0)), 0) 'Q3 BALANCE',
IFNULL(FORMAT(AVG(bq4.QTY), 0), 0) 'Q4 TARGET', IFNULL(FORMAT(SUM(oq4.QTY), 0), 0) 'Q4 ACTUAL', 
IFNULL(FORMAT((1- (SUM(oq4.QTY) / AVG(bq4.QTY)))*100, 2), 0) 'Q4 VARIANCE (%)', 
FORMAT((IFNULL(AVG(bq4.QTY), 0) - IFNULL(SUM(oq4.QTY), 0)), 0) 'Q4 BALANCE',
CASE (1- (oq1.QTY / bq1.QTY))*100 WHEN 0 THEN 'YES' ELSE 'NO' END AS 'OBJECTIVE MET?'
FROM STAT_TYPES s 
LEFT JOIN PROGRAMS pq1 ON s.STAT_TYPE = pq1.STAT_TYPE AND pq1.QUARTER = 1
LEFT JOIN PROGRAMS pq2 ON s.STAT_TYPE = pq2.STAT_TYPE AND pq2.QUARTER = 2
LEFT JOIN PROGRAMS pq3 ON s.STAT_TYPE = pq3.STAT_TYPE AND pq3.QUARTER = 3
LEFT JOIN PROGRAMS pq4 ON s.STAT_TYPE = pq4.STAT_TYPE AND pq4.QUARTER = 4
LEFT JOIN OPERATIONS oq1 ON s.STAT_TYPE = oq1.STAT_TYPE AND pq1.QUARTER = 1
LEFT JOIN OPERATIONS oq2 ON s.STAT_TYPE = oq2.STAT_TYPE AND pq1.QUARTER = 2
LEFT JOIN OPERATIONS oq3 ON s.STAT_TYPE = oq3.STAT_TYPE AND pq1.QUARTER = 3
LEFT JOIN OPERATIONS oq4 ON s.STAT_TYPE = oq4.STAT_TYPE AND pq1.QUARTER = 4
LEFT JOIN BUDGETS bq1 ON bq1.BUDGET_ID = pq1.BUDGET_ID 
LEFT JOIN BUDGETS bq2 ON bq2.BUDGET_ID = pq2.BUDGET_ID 
LEFT JOIN BUDGETS bq3 ON bq3.BUDGET_ID = pq3.BUDGET_ID 
LEFT JOIN BUDGETS bq4 ON bq4.BUDGET_ID = pq4.BUDGET_ID 
JOIN PROVINCES v 
	ON (bq1.PROVINCE = v.PROV_CODE OR bq2.PROVINCE = v.PROV_CODE OR bq3.PROVINCE = v.PROV_CODE OR bq4.PROVINCE = v.PROV_CODE)
	AND (oq1.PROVINCE = v.PROV_CODE OR oq2.PROVINCE = v.PROV_CODE OR oq3.PROVINCE = v.PROV_CODE OR oq4.PROVINCE = v.PROV_CODE)
GROUP BY pq1.YEAR,oq1.YEAR, pq1.PROVINCE, pq1.QUARTER, pq2.QUARTER, pq3.QUARTER, pq4.QUARTER, s.STAT_TYPE, s.DESCRIPTION
ORDER BY pq1.YEAR,oq1.YEAR, pq1.PROVINCE, pq1.QUARTER, s.STAT_TYPE, s.DESCRIPTION